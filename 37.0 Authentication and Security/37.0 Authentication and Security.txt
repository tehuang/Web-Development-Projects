==============
Authentication
==============
- Create an account to access your own data
- Restrict access

===================
Level 1: Plain text
===================
- Create a database to save the data 
- Create a username/password system where the password is saved in plain text

E.g. {
    "_id" : ObjectId("64e50f8e9fad8d229f4fa12f"),
    "email" : "1@2.com",
    "password" : "123",
    "__v" : NumberInt(0)
}
===================
Level 2: Encryption
===================
------------------------------------------------------------
Encryption: Password + key ---(cipher method)---> ciphertext
Decryption: Password <---(cipher method)--- key + ciphertext
------------------------------------------------------------
- Caesar Cipher : shift the letter
- Use mongoose-encryption, which uses AES method. This package can perform encryption and authentication. 
 > npm install mongoose-encryption
 e.g. const secret = "Thisisourlittlesecret";
      userSchema.plugin(encrypt,{secret:secret,encryptedFields: ["password"]});
- This package will encrpyt when we save and decrypt when we find the item.

E.g. {
    "_id" : ObjectId("64e51d709a75586f2604ec09"),
    "email" : "a@b.com",
    "_ct" : BinData(0, "YbVPRHFpIMQWp6RuZrFgEyoT4PmPOT5y0UgpvXBQhp3L0r7ge+xmVjglD1r59y+cGg=="),
    "_ac" : BinData(0, "YTE2+oZptImhFIxQwYXc6ZCORXzw1X9kP1pn24up5PuuWyJfaWQiLCJfY3QiXQ=="),
    "__v" : NumberInt(0)
}

Conclusion: The password has been encrypted into a long binary string.
But if a hacker gains access to app.js, they can still discover the secret key and decrypt the password into plain text.
Hence, use remember to use environment variables to keep the secret key safe

- Use dotenv
 > npm install dotenv
- Create .env file
  e.g. SECRET=Thisisourlittlesecret
- process.env.SECRET

==========================
Level 3: Hashing Passwords
==========================
- Even if we save the encryption key in a secure location like the .env file, there are still chances that it could be stolen by a hacker
-----------------------------------------------------------------------------------------------
Register Password ---(Hash Function) --> Hash (save to database)
Login Password ---(Hash Function) --> Hash (compare with the stored hash value in the database)  
-----------------------------------------------------------------------------------------------
- Hash Function: MD5, SHA
- Use md5
 > npm install md5
 e.g. md5(message) 

E.g. {
    "_id" : ObjectId("64e526aedf1c9baadede84c7"),
    "email" : "user@hash.com",
    "password" : "e10adc3949ba59abbe56e057f20f883e",
    "__v" : NumberInt(0)
}

Conclusion: Hashing passwords is superior to using a secret key as it eliminates the need for storage.
But, the same password processed through the same hashing function will always result in the same hash value. (Same password ==> Same Hash)
Hackers can create a hash table for common passwords and then compare the generated hash values in an attempt to guess the password. (e.g. dictionary attack) 

============================
Level 4: Hashing and Salting
============================
- By adding a salt into the password, the resulting hash value will differ even when the user sets the same password.
---------------------------------------------------------------
Password + Salt (Random Characters) ---(Hash Function) --> Hash
---------------------------------------------------------------
- bcrypt: industry-standard hashing algorithm that developers use to enhance password security. Better than MD5. 
- Salt Round: the number of times hashing is performed with the addition of salt.
--------------------------------------------------------------------------------
Password + Salt ---(Hash Function) --> Hash1 + Salt ---(Hash Function) --> Hash2    (salt round=2)
--------------------------------------------------------------------------------
To hash a password: 
bcrypt.hash(myPlaintextPassword, saltRounds, function(err, hash) {
    // Store hash in your password DB.
});

To check a password: 
bcrypt.compare(myPlaintextPassword, hash, function(err, result) {
    // result == true
});

E.g. {
    "_id" : ObjectId("64e557d1bdbe69dc19f5577f"),
    "email" : "user@bcrypthash.com",
    "password" : "$2b$10$eNGRA2knt7pAmL0OI2b94OZw4i09AsNfZVwbJB3.PHBBlALwSR1ne",
    "__v" : NumberInt(0)
}

=============================
Level 5: Cookies and Sessions
=============================
         ----Get---->              [visit Amazon website]
        <--Response---
Browser                Server
        -----Post---->             [Add an item to shopping cart]
        <--Response---             [Created a cookie that contains data about the item, and save it in the browser]

****************
In the future...
****************
         ----Get---->              [When visit the Amazon website, a cookie is sent to the server to help identify your identity and check for any previous session information]
Browser                Server
        <--Response---             [The server responds by sending back HTML/CSS/JavaScript, along with any previously saved items in the shopping cart]


There are various types of cookies, but this course will primarily focus on the cookies used to establish and maintain sessions. 


Session is a time period during which the browser interacts with the server. 
- Session starts: when a user logs in to the website. A cookie is created that contains information indicating the user is logged in and has been successfully authenticated. This eliminates the need to provide credentials again when accessing pages that require authentication. 
- Session ends: when the user logs out, and the associated cookie is destroyed.

To implement this, we can use 'Passport", an authentication middleware for Node.js
--------
Passport
--------
> npm install passport
> npm install passport-local     //Authenticate users for a website
> npm install passport-local-mongoose  //Add a username, hash and salt field to store the username, the hashed password and the salt value.
> npm install express-session

Ref: https://www.passportjs.org/

-----------------------------------------------------------------------
*Only necessary when using session. 
Serialize: creating a cookie and embedding the user's identification within it.
Deserialize: allows Passport to decrypt the cookie and extract the information contained inside
------------------------------------------------------------------------


E.g. {
    "_id" : ObjectId("64e57113e93116d3e54b8cd1"),
    "username" : "user@passportlocalmongoose.com",
    "salt" : "16c4f471a062f4584517e0c377dd45f66209792fd7b9625f76d3f64054842d59",
    "hash" : "cae1653ae13185f646d24d591a41736fa718ec537dc732c293cfe8297865af52c07914494c130609741215547ae96d4929d2bd6eb965869162bed932b55745feadb0854ceb404a073bfe18f27c1005d10a5c7793b2fc8e4ad33be1c4cdb7358a40262a5ace900a04de6f8cf6c76f9db4e8afa0692c7d848d8329e1db8adddd2d148ee7314e42e2bf9360ba32394266a37b6352df1f93412ba82a38c3ba03600ca49141337cf6372391d2e6ba0ac47951af1969faf8e9dccb6c2204f274cef96477d7d20e6b5fe6f05e1268552f9c54d45a005831d3560715088bb4efc98f7a7a5c0cffc614955bd86ea8d79fddddd0098dbde0e07d34c865508edde425ad15c2a2d1581ba844d3e524fab8303938e50779626727440b815a86929a58b62ccad6f08356f21af2b59dc0e24c346846d46df971da6353bd9100fbaea07bce09d4a995250f3141d991aa6a3c9af96d6aff27553c9e3fb2a290450b550b052a754c1c737f00597620938cb980292449faa9ced624a7b668d160b440535dd01100fb8a0dc2d487ab39a1cfef86b81327e9809a5a1543c8eebcb6b73cf562dac258cb339ddb3ffc6beea002b27455b89ec56b3ce1c9b9fcd933b6dd86bbdc57135b8748b6188754ec1ae361dc266da3384cc50346e67837b69fe5842754d23bec88255cc94c182dbe9d0c59097e83504a3efed9c80d5850713ae6761ace934ff3727ec4",
    "__v" : NumberInt(0)
}