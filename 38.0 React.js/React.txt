==============================
React.js (Frontend Framework)
==============================
- A JavaScript library for building user interfaces
- Restructure a complex interface into a component tree, with each component represented as if they were an HTML element.
E.g. 
 <body>
 <MyHeader />
 <MyFooter />
 </body>

- Each component has its own styling and functionalities.
  ------------  ------------  ------------
  |HTML      |  |HTML      |  |HTML      |
  |CSS       |  |CSS       |  |CSS       |
  |JavaScript|  |JavaScript|  |JavaScript|
  ------------  ------------  ------------
   Component1    Component2    Component3

- Able to compare the changes very efficiently (Diffing), allowing for re-rendering only the component that has changed.

======================
Intro to JSX and Babel
======================
- In index.html: 
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>JSX</title>
    <link rel="stylesheet" href="styles.css" />
  </head>

  <body>
    <div id="root"></div>
    <script src="../src/index.js" type="text/javascript"></script>
  </body>
</html>

- In index.js: 
import React from "react";
import ReactDOM from "react-dom";

ReactDOM.render(What To Show, Where to show it); 
e.g. ReactDOM.render(<h1>Hello World!</h1>, document.getElementById("root"));

----------------------------
Babel: a JavaScript compiler
----------------------------
React components are written in JSX, which is not supported by older browsers. 
Babel allows developers to use JSX syntax and compiles it into JavaScript that older browsers can run.
JSX = JavaScript syntax extension. It is a JavaScript extension that allows us to describe React's object tree using a syntax that resembles that of an HTML template.

======================================================
JavaScripts Expressions in JSX & ES6 Template Literals
======================================================
- Adding curly braces, '{}'
e.g. const name = "Teresa";  
     ReactDOM.render(<h1>Hello {name}!</h1>, document.getElementById("root"));

- ES6 Template Literals: inject strings into a piece of JavaScript
e.g. <h1>Hello {`${fName} ${lName}`}!</h1>

=========================================
JSX Attributes and Styling React Elements
=========================================
JSX attributes is following camel case convention
- e.g. className, contentEditable
Adding className is the most common way to add styling to React elements

==============================
Inline Styling React Elements
==============================
The style property requires a value that is a JavaScript object. 
And for that object to be interpreted correctly, it must be enclosed within curly brackets.
e.g. ReactDOM.render(<h1 style={{color:"red"}}> Hello </h1>, document.getElementById("root"));

================
React Components
================
Capitalized the first letter of the component name. 
This differentiation assists React in distinguishing between custom components and HTML elements.
E.g. function Heading(){
       return <h1>My favorite foods </h1>
     }

     <Heading></Heading>

create a new directory named "components" and save the .jsx files in it to store the components.

==========================================
JavaScript ES6 - Import,Export and Modules
==========================================
When we write: import Pi from Math.js => it will import the default export from Math.js
But if we want to import other than default, then we should write: import pi,{doublePi,triplePi} from Math.js

The advantage of using import/export modules is the ability to split up the JavaScript file into individual and more manageable components.

We can also say: import * as pi from "./math.js"
And since everything in "./math.js" will be imported, it is not encouraged to do this. 

=============================================
Local envrionment setup for React development
=============================================
1. Check node is up to date
2. Install vscode
3. Create React app
4. Run app

==========================
Mapping data to components
==========================
Map individual pieces of data to custom components, which are useful for handling arrays. E.g. Array.map(anotherFunction)
The map function will iterate through the items in the array, and for each item, it will invoke 'anotherFunction' and pass the corresponding object from the array

*In the 'anotherFunction', each component should possess a property called 'key', representing a unique value for each component within the array

================================
JavaScript ES6 Map/Filter/Reduce
================================
Map -Create a new array by doing something with each item in an array.
e.g. 
const newNumbers = numbers.map(function (x) {
  return 2 * x;
});

-----------------------------------------------------------------
Filter - Create a new array by keeping the items that return true
-----------------------------------------------------------------
e.g.
const newNumbers = numbers.filter(function (x) {
  return x > 10;
});

-----------------------------------------------------------------------
Reduce - Accumulate a value by doing something to each item in an array
-----------------------------------------------------------------------
var newNumber = numbers.reduce(function (accumulator, currentNumber) {
  return accumulator + currentNumber;
});

-----------------------------------------------------
Find - find the first item that matches from an array
-----------------------------------------------------
e.g. const newNumber = numbers.find(function (x) {
  return x > 10;
});

---------------------------------------------------------
FindIndex - find the index of the first item that matches
---------------------------------------------------------
e.g. const newNumber = numbers.findIndex(function (x) {
  return x > 10;
});

==============
Arrow Function
==============
A shorter way to write JavaScript function
E.g. const newNumbers = numbers.map(x => x * 2);

E.g. {emojipedia.map((emojiTerm) => (
          <Entry
            key={emojiTerm.id}
            emoji={emojiTerm.emoji}
            name={emojiTerm.name}
            description={emojiTerm.meaning}
          />
        ))}
=====================
Conditional Rendering
=====================
Ternary Operator: Condition? Do if true; Do if false

&& in JS : (Expression && Expression) e.g. (x>3 && x<7)
&& in React: (Condition && Expression) e.g. (x>3) && <h1> Hello </h1> 
             => If x>3, then renders "Hello". Otherwise, show nothing. 

=====
State
=====
User Interface = function(State) 

Declarative programming: how our user interface will look in different conditions.
Imperative programming: a step-by-step process for a program's execution.

Hook is a function that allows us to hook into the state of our app and read or modify it.

=====================
React Hooks- useState
=====================
Use hook only in a functional component

const state = useState(Initial State);
The output of useState is an array. state = [Initial value, function()];
To render the initial value, we use: state[0]

Destructing: destructure a complex structure
e.g. const[red, green, blue]=[9,127,227]

================================
Objects and Arrays destructuring
================================
//Destructuring arrays
const[car,dog] = animals; 

//Destructuring objects
const {name, sound}= cat; //The name should be the same as the one used in the object.
const {name: catName, sound: catSound} = cat; //Change the name to my desired one
const {name="fluffy", sound = "Purr"} = cat; //if name if undefined, then name it as "fluffy"
const {feedingRequirements:{food,water}} = cat; //to handle nested object

=======================
Event Handling in React
=======================
onClick={}
onMouseOut={}
onMouseOver={}
style={{backgroundColor:function?"True":"False"}}

===========
React Forms
===========
HTML form 擁有並管理自己的 state。
然而，React 本身也有管理 state 的功能。這時我們就面臨一個選擇：
1. 將 HTML form element 的 state 也交給 React 一併控管 ==> Controlled component
2. 讓 HTML form element 管理自己的 state，React 不加以管控 ==> Uncontrolled component

所有使用者的輸入行為都會藉由 event 被 "推送" 到 React state 中；React 在收到 event 後就可做出對應的 state 改動以將資料更新到 form element 上
也就是說，form element 的內容永遠是由 state 同步的，React state 因此成為單一資料來源 （Single Source Of Truth）
Advantages: Since state 都是由 React 掌控，可以避免資料修改來源過多，導致維護難度提高

==========================================
Class components vs. Functional components
===========================================
Class is the older version; nowadays, people are starting to use Hooks

=======================
Changing complex states
=======================
Instead of storing a simple value, let useState save object
e.g. 
const [fullName, setFullName] = useState({
    fname: "",
    lname: ""
  });

To get the previous value: 
e.g.
setFullName((prev) => {
  console.log(prev)
}

===========================
ES6 Spread Operator ( ... )
===========================
Spread operator allows us to quickly copy an existing array or object into another array or object. 
e.g. 
const citrus=["Lime","Lemon","Orange"];
const fruits = ["Apple","Banana","Coconur", ...citrus];
console.log(fruits); //["Apple", "Banana", "Coconur", "Lime", "Lemon", "Orange"]

e.g.
const fullName = {
  fName: "James",
  lName: "Bond"
};
const user = {
  ...fullName,
  username: "007"
};













