==============
Authentication
==============
- Create an account to access your own data
- Restrict access

-------------------
Level 1: Plain text
-------------------
- Create a database to save the data 
- Create a username/password system where the password is saved in plain text

E.g. {
    "_id" : ObjectId("64e50f8e9fad8d229f4fa12f"),
    "email" : "1@2.com",
    "password" : "123",
    "__v" : NumberInt(0)
}
-------------------
Level 2: Encryption
-------------------
- Caesar Cipher : shift the letter
- Use mongoose-encryption, which uses AES method. This package can perform encryption and authentication. 
 > npm install mongoose-encryption
 e.g. const secret = "Thisisourlittlesecret";
      userSchema.plugin(encrypt,{secret:secret,encryptedFields: ["password"]});
- This package will encrpyt when we save and decrypt when we find the item.

E.g. {
    "_id" : ObjectId("64e51d709a75586f2604ec09"),
    "email" : "a@b.com",
    "_ct" : BinData(0, "YbVPRHFpIMQWp6RuZrFgEyoT4PmPOT5y0UgpvXBQhp3L0r7ge+xmVjglD1r59y+cGg=="),
    "_ac" : BinData(0, "YTE2+oZptImhFIxQwYXc6ZCORXzw1X9kP1pn24up5PuuWyJfaWQiLCJfY3QiXQ=="),
    "__v" : NumberInt(0)
}

Conclusion: The password has been encrypted into a long binary string.
But if a hacker gains access to app.js, they can still discover the secret key and decrypt the password into plain text.
Hence, use remember to use environment variables to keep the secret key safe

- Use dotenv
 > npm install dotenv
- Create .env file
  e.g. SECRET=Thisisourlittlesecret
- process.env.SECRET

--------------------------
Level 3: Hashing Passwords
--------------------------


